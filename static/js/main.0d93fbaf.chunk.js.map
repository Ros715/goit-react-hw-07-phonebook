{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","redux/contacts-selectors.js","components/ContactList/ContactList.js","redux/actions.js","redux/contacts-api.js","App.js","redux/operations.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","className","styles","form","style","marginBottom","e","preventDefault","type","value","pattern","title","required","onChange","currentTarget","Filter","getContacts","state","contacts","getFilteredContacts","createSelector","filter","contact","toLowerCase","includes","connect","onDelete","map","onClick","id","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","fetchContacts","a","axios","get","data","addContact","post","deleteContact","contactId","delete","defaults","baseURL","useSelector","dispatch","useDispatch","useEffect","contactsActions","contactsApi","selectedContact","length","alert","uuidv4","contactsOperations","createReducer","action","payload","rootReducer","combineReducers","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d93fbaf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1YvpW\"};","import React, { useState } from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={styles.form}\r\n      style={{ marginBottom: \"32px\" }}\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state.name, this.state.number);\r\n        onSubmit(name, number);\r\n        reset();\r\n      }}\r\n    >\r\n      <p>Name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={name}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        onChange={(e) => {\r\n          //console.log(\"name\", e.currentTarget.value);\r\n          setName(e.currentTarget.value);\r\n        }}\r\n      />\r\n\r\n      <p>Number</p>\r\n      <input\r\n        type=\"tel\"\r\n        value={number}\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        onChange={(e) => {\r\n          //console.log(\"number\", e.currentTarget.value);\r\n          setNumber(e.currentTarget.value);\r\n        }}\r\n      />\r\n      <div>\r\n        <br />\r\n        <button type=\"submit\">Add contact</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","//import styles from \"./Filter.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ onChange }) {\r\n  return (\r\n    <div>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          //console.log(e.currentTarget.value);\r\n          onChange(e.currentTarget.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","/*\r\nnpm install reselect\r\n*/\r\nimport { createSelector } from \"reselect\";\r\n\r\nexport const getContacts = (state) => state.contacts;\r\n\r\nexport const getFilter = (state) => state.filter;\r\n\r\n/* version without reselection:\r\nexport const getFilteredContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n};\r\n*/\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) =>\r\n    contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n);\r\n","//import styles from \"./ContactList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { getFilteredContacts } from \"../../redux/contacts-selectors\";\r\n\r\nfunction ContactList({ contacts, onDelete }) {\r\n  //const contacts = useSelector((state) => state.contacts);\r\n  //const filter = useSelector((state) => state.filter);\r\n\r\n  return (\r\n    <ul>\r\n      {contacts.map((contact) => {\r\n        return (\r\n          <li key={contact.id}>\r\n            {contact.name} {contact.number}\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onDelete(contact.id);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getFilteredContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(ContactList);\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n//import { types } from \"./actions-types\";\r\n\r\nexport const fetchContactsRequest = createAction(\"fetchContacts/request\");\r\nexport const fetchContactsSuccess = createAction(\"fetchContacts/success\");\r\nexport const fetchContactsError = createAction(\"fetchContacts/error\");\r\n\r\nexport const addContactRequest = createAction(\"addContact/request\");\r\nexport const addContactSuccess = createAction(\"addContact/success\");\r\nexport const addContactError = createAction(\"addContact/error\");\r\n\r\nexport const deleteContactRequest = createAction(\"deleteContact/request\");\r\nexport const deleteContactSuccess = createAction(\"deleteContact/success\");\r\nexport const deleteContactError = createAction(\"deleteContact/error\");\r\n\r\nexport const changeFilter = createAction(\"changeFilter\");\r\n","/*\r\nnpm install axios\r\nnpm install -g json-server\r\njson-server --watch db.json\r\n*/\r\n\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\n\r\nexport async function fetchContacts() {\r\n  const { data } = await axios.get(\"/contacts\");\r\n  return data;\r\n}\r\n\r\nexport async function addContact(contact) {\r\n  const { data } = await axios.post(`/contacts`, contact);\r\n  return data;\r\n}\r\n\r\nexport async function deleteContact(contactId) {\r\n  const { data } = await axios.delete(`/contacts/${contactId}`);\r\n  return data;\r\n}\r\n","import React, { /*useState,*/ useEffect } from \"react\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm.js\";\r\nimport Filter from \"./components/Filter/Filter.js\";\r\nimport ContactList from \"./components/ContactList/ContactList.js\";\r\nimport \"./App.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useSelector, useDispatch, connect } from \"react-redux\";\r\nimport * as contactsActions from \"./redux/actions\";\r\nimport * as contactsOperations from \"./redux/operations\";\r\nimport { getContacts } from \"./redux/contacts-selectors\";\r\n\r\nfunction App() {\r\n  const contacts = useSelector(getContacts);\r\n  //const filter = useSelector((state) => state.filter);\r\n  //const [filter, setFilter] = useState(() => { return \"\"; });\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const onAddContact = (name, number) => {\r\n    const selectedContact = contacts.filter((contact) => {\r\n      return contact.name === name;\r\n    });\r\n    if (selectedContact.length > 0) {\r\n      alert(name + \" is already in contacts\");\r\n    } else {\r\n      dispatch(contactsOperations.addContact({ id: uuidv4(), name, number }));\r\n    }\r\n  };\r\n\r\n  const onDeleteContact = (contactId) => {\r\n    dispatch(contactsOperations.deleteContact(contactId));\r\n  };\r\n\r\n  const onChangeFilter = (filter) => {\r\n    dispatch(contactsActions.changeFilter(filter));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm onSubmit={onAddContact} />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter onChange={onChangeFilter} />\r\n      <ContactList onDelete={onDeleteContact} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect()(App);\r\n","import * as contactsApi from \"./contacts-api\";\r\nimport * as contactsActions from \"./actions\";\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n  try {\r\n    const contacts = await contactsApi.fetchContacts();\r\n    dispatch(contactsActions.fetchContactsSuccess(contacts));\r\n  } catch (error) {\r\n    dispatch(contactsActions.fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (contact) => async (dispatch) => {\r\n  dispatch(contactsActions.addContactRequest(contact));\r\n  try {\r\n    /*const contacts =*/ await contactsApi.addContact(contact);\r\n    dispatch(contactsActions.addContactSuccess(contact));\r\n  } catch (error) {\r\n    dispatch(contactsActions.addContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = (contactId) => async (dispatch) => {\r\n  dispatch(contactsActions.deleteContactRequest(contactId));\r\n  try {\r\n    /*const contacts =*/ await contactsApi.deleteContact(contactId);\r\n    dispatch(contactsActions.deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(contactsActions.deleteContactError(error));\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport * as contactsActions from \"./actions\";\r\n\r\nconst contacts = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n  [contactsActions.addContactSuccess]: (state, action) => [\r\n    ...state,\r\n    action.payload,\r\n  ],\r\n  [contactsActions.deleteContactSuccess]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactsActions.changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\n//import { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}